// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var React                   = require("react");
var ReasonReact             = require("reason-react/src/ReasonReact.js");
var TaskList$ReactTemplate  = require("./TaskList.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var TaskDraft$ReactTemplate = require("./TaskDraft.bs.js");

var component = ReasonReact.reducerComponent("App");

function taskExists(task) {
  return (function (param) {
      return List.find((function (existing) {
                    return +(existing[/* id */0] === task[/* id */0]);
                  }), param);
    });
}

function conflictMessage(id) {
  return id + " already exists.";
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, TaskList$ReactTemplate.make(self[/* state */2][/* tasks */1], /* array */[])), ReasonReact.element(/* None */0, /* None */0, TaskDraft$ReactTemplate.make(self[/* state */2][/* conflict */0], (function (task) {
                            return Curry._1(self[/* send */4], /* SubmitTask */Block.__(1, [task]));
                          }), /* array */[])));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* conflict : None */0,
              /* tasks : [] */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action.tag) {
        var task = action[0];
        var exit = 0;
        var val;
        try {
          val = taskExists(task)(state[/* tasks */1]);
          exit = 1;
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            return /* Update */Block.__(0, [/* record */[
                        /* conflict : None */0,
                        /* tasks : :: */[
                          task,
                          state[/* tasks */1]
                        ]
                      ]]);
          } else {
            throw exn;
          }
        }
        if (exit === 1) {
          return /* Update */Block.__(0, [/* record */[
                      /* conflict : Some */[task[/* id */0] + " already exists."],
                      /* tasks */state[/* tasks */1]
                    ]]);
        }
        
      } else {
        var task$1 = action[0];
        var tasks = List.filter((function (existing) {
                  return +(existing !== task$1);
                }))(state[/* tasks */1]);
        return /* Update */Block.__(0, [/* record */[
                    /* conflict */state[/* conflict */0],
                    /* tasks */tasks
                  ]]);
      }
    });
  return newrecord;
}

exports.component       = component;
exports.taskExists      = taskExists;
exports.conflictMessage = conflictMessage;
exports.make            = make;
/* component Not a pure module */
